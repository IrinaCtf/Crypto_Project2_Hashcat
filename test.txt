FUNCTION localize(message, start_hashes, end_hashes):
    i1 = find_start_corruption(message, start_hashes)
    i2 = find_end_corruption(message, end_hashes)
    RETURN max(i1, i2)

FUNCTION find_start_corruption(msg, hashes, offset = 0):
    IF msg is too short OR hashes are empty:
        RETURN -1
    
    IF msg is very short:
        RETURN offset IF SHA-256(msg) â‰  hashes[0]
        ELSE RETURN -1

    Split msg into 3 parts:
        - first = first 2^k chars
        - second = next 2^k chars
        - remaining = rest

    Compare hashes of first and second with hashes[0] and hashes[1]
    IF first hash mismatches: RETURN offset
    IF second hash mismatches: RETURN offset + size of first

    RECURSE on remaining with hashes[2:], update offset

FUNCTION find_end_corruption(msg, hashes, offset = 0):
    IF msg is too short OR hashes are empty:
        RETURN -1

    IF msg is very short:
        RETURN offset + len(msg) IF SHA-256(msg) == last hash
        ELSE RETURN -1

    Split msg from end into 3 parts:
        - last = last 2^k chars
        - second_last = 2^k chars before that
        - remaining = the rest

    Compare hashes of second_last and last with last two hashes
    IF last hash matches: RETURN offset + len(msg)
    IF second_last hash matches: RETURN offset + len(msg) - size of last

    RECURSE on remaining with hashes[:-2], offset unchanged
