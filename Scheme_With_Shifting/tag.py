import hashlib
import math

SHOW_HASHTAG_AMOUNT = True  # Toggle this to switch test modes

def tag(message: str) -> tuple[list[str], list[str]]:
    """
    Generate two lists of SHA-256 hash digests from the message.

    First list: Recursively split from the start:
        [0 : 2^k] and [2^k : 2^(k+1)], recursively applied.
    Second list: Recursively split from the end:
        [L - 2^k:] and [L - 2^(k+1) : L - 2^k], recursively applied.

    Returns:
        A tuple of (list_from_start, list_from_end)
    """

    def helper_from_start(sub_msg: str) -> list[str]:
        L = len(sub_msg)
        if L <= 0: return []
        if L <= 2:
            return [hashlib.sha256(sub_msg.encode()).hexdigest()]
        k = int(math.floor(math.log2(L))) - 1
        if k < 0:
            return [hashlib.sha256(sub_msg.encode()).hexdigest()]
        first = sub_msg[0:2**k]
        second = sub_msg[2**k:2**(k+1)]
        remaining = sub_msg[2**(k+1):]
        hashes = [
            hashlib.sha256(first.encode()).hexdigest(),
            hashlib.sha256(second.encode()).hexdigest()
        ]
        return hashes + helper_from_start(remaining)

    def helper_from_end(sub_msg: str) -> list[str]:
        L = len(sub_msg)
        if L <= 0: return []
        if L <= 2:
            return [hashlib.sha256(sub_msg.encode()).hexdigest()]
        k = int(math.floor(math.log2(L))) - 1
        if k < 0:
            return [hashlib.sha256(sub_msg.encode()).hexdigest()]
        seg1 = sub_msg[L - 2**k:]
        seg2 = sub_msg[L - 2**(k+1): L - 2**k]
        remaining = sub_msg[:L - 2**(k+1)]
        hashes = [
            hashlib.sha256(seg1.encode()).hexdigest(),
            hashlib.sha256(seg2.encode()).hexdigest()
        ]
        return helper_from_end(remaining) + hashes

    return helper_from_start(message), helper_from_end(message)


if __name__ == "__main__":
    if not SHOW_HASHTAG_AMOUNT:
        # Human-readable test cases
        test_messages = [
            "", "a", "hi", "hello!", "abcdefghijklmno",
            "abcdefghijklmnopqrstuvwxyz",
            "The quick brown fox jumps over the lazy dog"
        ]

        for i, msg in enumerate(test_messages):
            print(f"\nTest case {i+1}: \"{msg}\"")
            start_hashes, end_hashes = tag(msg)
            print(f"From start ({len(start_hashes)} hashes):")
            for j, h in enumerate(start_hashes):
                print(f"  [S{j}] {h}")
            print(f"From end ({len(end_hashes)} hashes):")
            for j, h in enumerate(end_hashes):
                print(f"  [E{j}] {h}")
    else:
        # Benchmark hash count only
        import time

        sizes = [10, 100, 1000, 10_000, int(1e6), int(1e7), int(1e8)] 
        print("Benchmark: number of hashes generated by input length")
        for size in sizes:
            print(f"\nInput length: {size}")
            input_str = "a" * size
            start_time = time.time()
            start_hashes, end_hashes = tag(input_str)
            elapsed = time.time() - start_time
            print(f"  Start-based hashes: {len(start_hashes)}")
            print(f"  End-based hashes:   {len(end_hashes)}")
            print(f"  Time taken: {elapsed:.2f} seconds")
